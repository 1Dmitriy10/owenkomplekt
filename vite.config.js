import { defineConfig } from 'vite';
import handlebars from 'vite-plugin-handlebars';
import path from 'path';
import fs from 'fs';
import sharp from 'sharp';
import tailwindcss from '@tailwindcss/vite';
import chokidar from 'chokidar';

// –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–∞ —à—Ä–∏—Ñ—Ç–∞
function getFontWeight(style) {
  const weights = {
    'thin': 100,
    'extralight': 200,
    'light': 300,
    'regular': 400,
    'normal': 400,
    'medium': 500,
    'semibold': 600,
    'bold': 700,
    'extrabold': 800,
    'black': 900
  };
  
  return weights[style.toLowerCase()] || 400;
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
function getFormat(ext) {
  const formats = {
    'woff2': 'woff2',
    'woff': 'woff',
    'ttf': 'truetype',
    'otf': 'opentype'
  };
  
  return formats[ext] || ext;
}

// –ü–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
const fontAutoPlugin = () => {
  return {
    name: 'font-auto-plugin',
    
    async buildStart() {
      const fontsDir = path.resolve(__dirname, 'src/files/fonts');
      const cssOutputDir = path.resolve(__dirname, 'src/scss/main');
      const cssFilePath = path.join(cssOutputDir, 'fonts.scss');
      
      console.log('Looking for fonts in:', fontsDir);
      console.log('Output SCSS file:', cssFilePath);
      
      if (!fs.existsSync(fontsDir)) {
        console.log('Fonts directory not found, skipping font generation');
        return;
      }

      if (!fs.existsSync(cssOutputDir)) {
        fs.mkdirSync(cssOutputDir, { recursive: true });
        console.log('Created directory:', cssOutputDir);
      }

      try {
        const fontFiles = fs.readdirSync(fontsDir);
        console.log('Found font files:', fontFiles);
        
        const fontFaceRules = [];
        const fontFamilies = {};
        
        for (const file of fontFiles) {
          if (/\.(woff2|woff|ttf|otf)$/i.test(file)) {
            const fileName = path.parse(file).name;
            const ext = path.parse(file).ext.slice(1);
            
            console.log('Processing font:', fileName);
            
            // –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞
            const match = fileName.match(/(.*?)([-_](bold|italic|light|medium|regular|black|extrabold|semibold|thin|extralight))?$/i);
            const familyName = match[1].replace(/[-_]/g, ' ');
            const style = match[3] || 'regular';
            
            if (!fontFamilies[familyName]) {
              fontFamilies[familyName] = [];
            }
            
            fontFamilies[familyName].push({
              file,
              ext,
              style: style.toLowerCase(),
              weight: getFontWeight(style),
              isItalic: style.toLowerCase().includes('italic')
            });
          }
        }
        
        console.log('Font families:', Object.keys(fontFamilies));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º @font-face –ø—Ä–∞–≤–∏–ª–∞
        for (const [family, variants] of Object.entries(fontFamilies)) {
          for (const variant of variants) {
            const fontFaceRule = `
@font-face {
  font-family: '${family}';
  src: url('../../files/fonts/${variant.file}') format('${getFormat(variant.ext)}');
  font-weight: ${variant.weight};
  font-style: ${variant.isItalic ? 'italic' : 'normal'};
  font-display: swap;
}
            `.trim();
            fontFaceRules.push(fontFaceRule);
          }
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º SCSS —Ñ–∞–π–ª
        if (fontFaceRules.length > 0) {
          const cssContent = `/* Auto-generated font styles */\n${fontFaceRules.join('\n\n')}`;
          fs.writeFileSync(cssFilePath, cssContent);
          console.log(`‚úÖ Generated fonts2.scss with ${fontFaceRules.length} @font-face rules`);
        } else {
          console.log('‚ùå No font face rules were generated');
        }
        
      } catch (error) {
        console.error('Error generating font styles:', error);
      }
    }
  };
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã –∞–ª–∏–∞—Å–æ–≤ –≤ HTML
const aliasHtmlPlugin = () => {
  return {
    name: 'alias-html',
    transformIndexHtml(html) {
      const aliasMap = {
        '@img/': '/images/',
        '@scss/': './scss/',
        '@js/': './js/',
        '@bg/': './img/',
        '@fonts/': './fonts/'
      };
      
      let transformedHtml = html;
      for (const [alias, realPath] of Object.entries(aliasMap)) {
        transformedHtml = transformedHtml.replace(new RegExp(alias, 'g'), realPath);
      }
      
      return transformedHtml;
    },
  };
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WebP
// –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WebP
const webpGenerator = () => {
  let isBuild = false;
  let watcher = null;

  return {
    name: 'webp-generator',

    config(config, { command }) {
      isBuild = command === 'build';
    },

    async buildStart() {
      if (isBuild) return;

      const imagesDir = path.resolve(__dirname, 'src/images');
      const webpDir = path.resolve(__dirname, 'src/images/webp');

      if (!fs.existsSync(imagesDir)) {
        console.log('‚ùå Images directory not found:', imagesDir);
        return;
      }

      // –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É webp, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!fs.existsSync(webpDir)) {
        fs.mkdirSync(webpDir, { recursive: true });
        console.log('üìÅ Created: src/images/webp');
      }

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WebP
      const generateWebP = async (filePath) => {
        try {
          const fileName = path.parse(filePath).name;
          const ext = path.extname(filePath).toLowerCase();
          const outputFilePath = path.join(webpDir, `${fileName}.webp`);

          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          if (!/\.(jpg|jpeg|png)$/i.test(ext)) return;

          await sharp(filePath)
            .webp({ quality: 90, effort: 4 })
            .toFile(outputFilePath);
          
          console.log(`‚úÖ WebP generated: ${path.basename(outputFilePath)}`);
        } catch (error) {
          console.warn(`‚ùå Failed to generate WebP: ${error.message}`);
        }
      };

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
      try {
        const files = fs.readdirSync(imagesDir);
        let processed = 0;
        
        for (const file of files) {
          if (/\.(jpg|jpeg|png)$/i.test(file)) {
            await generateWebP(path.join(imagesDir, file));
            processed++;
          }
        }
        
        console.log(`üîÑ Processed ${processed} existing images`);
      } catch (error) {
        console.error('‚ùå Error reading images directory:', error);
      }
    },

    async configureServer(server) {
      if (isBuild) return;

      const imagesDir = path.resolve(__dirname, 'src/images');
      const webpDir = path.resolve(__dirname, 'src/images/webp');

      if (!fs.existsSync(imagesDir)) {
        console.log('‚ùå Images directory not found for watching');
        return;
      }

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WebP
      const generateWebP = async (filePath) => {
        try {
          const fileName = path.parse(filePath).name;
          const ext = path.extname(filePath).toLowerCase();
          const outputFilePath = path.join(webpDir, `${fileName}.webp`);

          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          if (!/\.(jpg|jpeg|png)$/i.test(ext)) return;

          await sharp(filePath)
            .webp({ quality: 90, effort: 4 })
            .toFile(outputFilePath);
          
          console.log(`‚úÖ WebP generated: ${path.basename(outputFilePath)}`);
        } catch (error) {
          console.warn(`‚ùå Failed to generate WebP: ${error.message}`);
        }
      };

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –í–°–ï–• –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ
      watcher = chokidar.watch(imagesDir, {
        ignoreInitial: true,
        persistent: true,
        awaitWriteFinish: {
          stabilityThreshold: 1000,
          pollInterval: 100
        },
        depth: 1 // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
      watcher
        .on('add', (filePath) => {
          console.log(`üì∏ New image added: ${path.basename(filePath)}`);
          generateWebP(filePath);
        })
        .on('change', (filePath) => {
          console.log(`üì∏ Image changed: ${path.basename(filePath)}`);
          generateWebP(filePath);
        })
        .on('unlink', (filePath) => {
          // –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π webp —Ñ–∞–π–ª –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
          if (/\.(jpg|jpeg|png)$/i.test(filePath)) {
            const webpPath = path.join(webpDir, `${path.parse(filePath).name}.webp`);
            if (fs.existsSync(webpPath)) {
              fs.unlinkSync(webpPath);
              console.log(`üóëÔ∏è Removed WebP: ${path.basename(webpPath)}`);
            }
          }
        });

      console.log('üëÄ Watching for image changes in src/images/...');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watcher –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
      server.httpServer?.once('close', async () => {
        if (watcher) {
          await watcher.close();
          console.log('üëã Stopped watching for images');
        }
      });
    },

    async closeBundle() {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º watcher –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      if (watcher) {
        await watcher.close();
      }

      if (!isBuild) return;

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è WebP –¥–ª—è production
      const imagesDir = path.resolve(__dirname, 'src/images');
      const outputDir = path.resolve(__dirname, 'dist/images/webp');

      if (!fs.existsSync(imagesDir)) return;
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }

      try {
        const files = fs.readdirSync(imagesDir);
        for (const file of files) {
          if (/\.(jpg|jpeg|png)$/i.test(file)) {
            const inputPath = path.join(imagesDir, file);
            const outputPath = path.join(outputDir, `${path.parse(file).name}.webp`);

            await sharp(inputPath)
              .webp({ quality: 80, effort: 4 })
              .toFile(outputPath);
            console.log(`‚úÖ Prod WebP: ${file}`);
          }
        }
      } catch (error) {
        console.error('‚ùå Error generating production WebP:', error);
      }
    },
  };
};

// –ü–ª–∞–≥–∏–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö assets
const copyAssetsPlugin = () => {
  return {
    name: 'copy-assets',
    
    // –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∫–∏
    async closeBundle() {
      console.log('üìã Copying additional assets...');
      
      // –ö–æ–ø–∏—Ä—É–µ–º –í–°–ï –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ src/images –≤ dist/images
      const imagesSrcDir = path.resolve(__dirname, 'src/images');
      const imagesDestDir = path.resolve(__dirname, 'dist/images');
      
      if (fs.existsSync(imagesSrcDir)) {
        if (!fs.existsSync(imagesDestDir)) {
          fs.mkdirSync(imagesDestDir, { recursive: true });
        }
        
        const imageFiles = fs.readdirSync(imagesSrcDir);
        for (const file of imageFiles) {
          // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ —É–∂–µ –≤ webp –ø–∞–ø–∫–µ
          if (!file.endsWith('.webp') && /\.(jpg|jpeg|png|gif|svg|ico)$/i.test(file)) {
            fs.copyFileSync(path.join(imagesSrcDir, file), path.join(imagesDestDir, file));
          }
        }
        console.log('‚úÖ Original images copied to dist/images');
      }
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è Vite
      const additionalAssets = [
        { 
          src: path.resolve(__dirname, 'src/files/icons'), 
          dest: path.resolve(__dirname, 'dist/files/icons') 
        },
        { 
          src: path.resolve(__dirname, 'src/files/docs'), 
          dest: path.resolve(__dirname, 'dist/files/docs') 
        },
        // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
      ];
      
      for (const asset of additionalAssets) {
        if (fs.existsSync(asset.src)) {
          if (!fs.existsSync(asset.dest)) {
            fs.mkdirSync(asset.dest, { recursive: true });
          }
          
          const files = fs.readdirSync(asset.src);
          for (const file of files) {
            fs.copyFileSync(
              path.join(asset.src, file), 
              path.join(asset.dest, file)
            );
          }
          console.log(`‚úÖ Copied: ${path.basename(asset.src)}`);
        }
      }
      
      // –ö–æ–ø–∏—Ä—É–µ–º WebP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ src)
      const webpSrcDir = path.resolve(__dirname, 'src/images/webp');
      const webpDestDir = path.resolve(__dirname, 'dist/images/webp');
      
      if (fs.existsSync(webpSrcDir)) {
        if (!fs.existsSync(webpDestDir)) {
          fs.mkdirSync(webpDestDir, { recursive: true });
        }
        
        const webpFiles = fs.readdirSync(webpSrcDir);
        for (const file of webpFiles) {
          if (/\.webp$/i.test(file)) {
            fs.copyFileSync(path.join(webpSrcDir, file), path.join(webpDestDir, file));
          }
        }
        console.log('‚úÖ WebP images copied');
      }
    }
  };
};

export default defineConfig({
  root: path.resolve(__dirname, 'src'),
  base: './',

  resolve: {
    alias: {
      '@img': path.resolve(__dirname, 'src/images'),
      '@scss': path.resolve(__dirname, 'src/scss'),
      '@js': path.resolve(__dirname, 'src/js'),
      '@bg': path.resolve(__dirname, 'src/img'),
      '@fonts': path.resolve(__dirname, 'src/files/fonts'),
    },
  },

  plugins: [
    fontAutoPlugin(),
    aliasHtmlPlugin(),
    webpGenerator(),
    handlebars({
      partialDirectory: path.resolve(__dirname, 'src/html/partials'),
      context: {
        title: {
          index: '–ì–ª–∞–≤–Ω–∞—è',
        },
      },
      reloadOnPartialChange: true,
    }),
    copyAssetsPlugin(),
    tailwindcss(),
  ],

  build: {
    minify: true,
    sourcemap: 'inline',
    outDir: path.resolve(__dirname, 'dist'),
    
    // ‚ö° –í–ê–ñ–ù–û: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ assets –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω
    assetsInlineLimit: 0, // –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–ª–∞–π–Ω–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤
    rollupOptions: {
      output: {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —à—Ä–∏—Ñ—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        assetFileNames: (assetInfo) => {
          if (assetInfo.name && /\.(woff|woff2|eot|ttf|otf)$/i.test(assetInfo.name)) {
            return `files/fonts/[name][extname]`;
          }
          if (assetInfo.name && /\.(jpg|jpeg|png|gif|svg|ico)$/i.test(assetInfo.name)) {
            return `images/[name][extname]`;
          }
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö assets (CSS) –æ—Å—Ç–∞–≤–ª—è–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ –ø–∞–ø–∫–µ assets
          return `assets/[name]-[hash][extname]`;
        },
        // JS —Ñ–∞–π–ª—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ assets
        chunkFileNames: 'assets/[name]-[hash].js',
        entryFileNames: 'assets/[name]-[hash].js',
      },
      
      input: {
        index: path.resolve(__dirname, 'src/html/index.html'),
        ui_kit: path.resolve(__dirname, 'src/html/ui-kit.html'),
        error: path.resolve(__dirname, 'src/html/404.html'),
      },
    },
    emptyOutDir: true,
  },

  server: {
    open: '/html/index.html',
    watch: {
      usePolling: true,
      interval: 1000,
      ignored: ['**/node_modules/**', '**/.git/**'],
    },
  },
});