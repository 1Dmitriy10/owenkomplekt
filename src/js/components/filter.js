export function filter() {
/*
<div class="filter-container">
    <h3>–¢–æ–∫ –ù–æ–º, –ê</h3>
    <div class="range-inputs">
        <input type="number" data-id="minValue" placeholder="–û—Ç 3" value="3" min="3" max="170">
        <span>‚Äî</span>
        <input type="number" data-id="maxValue" placeholder="–î–æ 170" value="170" min="3" max="170">
    </div>
    <div class="slider-container">
        <div class="slider-track" style="width: 0%"></div>
        <div class="slider-handle" data-handle="min" style="left: 0%;"></div>
        <div class="slider-handle" data-handle="max" style="left: 100%;"></div>
    </div>
</div>
*/
// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const filterContainers = document.querySelectorAll('.filter-container');

  filterContainers.forEach(container => {
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const minValueInput = container.querySelector('[data-id="minValue"]');
    const maxValueInput = container.querySelector('[data-id="maxValue"]');
    const sliderContainer = container.querySelector('.slider-container');
    const sliderTrack = sliderContainer.querySelector('.slider-track');
    const minHandle = sliderContainer.querySelector('[data-handle="min"]');
    const maxHandle = sliderContainer.querySelector('[data-handle="max"]');

    // üéØ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    const rangeMin = parseFloat(minValueInput.min || minValueInput.getAttribute('min')) || 0;
    const rangeMax = parseFloat(maxValueInput.max || maxValueInput.getAttribute('max')) || 100;

    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    updateSlider();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    minValueInput.addEventListener('change', function () {
      const val = parseFloat(this.value);
      const maxVal = parseFloat(maxValueInput.value);
      if (!isNaN(val) && val <= maxVal) {
        minHandle.style.left = `${((val - rangeMin) / (rangeMax - rangeMin)) * 100}%`;
        updateTrack();
      }
    });

    maxValueInput.addEventListener('change', function () {
      const val = parseFloat(this.value);
      const minVal = parseFloat(minValueInput.value);
      if (!isNaN(val) && val >= minVal) {
        maxHandle.style.left = `${((val - rangeMin) / (rangeMax - rangeMin)) * 100}%`;
        updateTrack();
      }
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    function updateSlider() {
      const minVal = parseFloat(minValueInput.value);
      const maxVal = parseFloat(maxValueInput.value);

      minHandle.style.left = `${((minVal - rangeMin) / (rangeMax - rangeMin)) * 100}%`;
      maxHandle.style.left = `${((maxVal - rangeMin) / (rangeMax - rangeMin)) * 100}%`;

      updateTrack();
    }

    function updateTrack() {
      const minVal = parseFloat(minValueInput.value);
      const maxVal = parseFloat(maxValueInput.value);

      const minPos = ((minVal - rangeMin) / (rangeMax - rangeMin)) * 100;
      const maxPos = ((maxVal - rangeMin) / (rangeMax - rangeMin)) * 100;

      sliderTrack.style.width = `${maxPos - minPos}%`;
      sliderTrack.style.left = `${minPos}%`;
    }

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Ä—É—á–µ–∫
    let isDragging = false;
    let currentHandle = null;

    function startDrag(e) {
      const handle = e.target.closest('.slider-handle');
      if (!handle) return;

      isDragging = true;
      currentHandle = handle.dataset.handle;
      handle.classList.add('active');

      const rect = sliderContainer.getBoundingClientRect();
      const percent = ((e.clientX - rect.left) / rect.width) * 100;
      updateHandlePosition(percent);
    }

    function updateHandlePosition(percent) {
      // üîÅ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ
      let value = rangeMin + (percent / 100) * (rangeMax - rangeMin);
      value = parseFloat(value.toFixed(2)); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤

      // üö¶ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö [rangeMin, rangeMax]
      value = Math.max(rangeMin, Math.min(rangeMax, value));

      const minVal = parseFloat(minValueInput.value);
      const maxVal = parseFloat(maxValueInput.value);

      if (currentHandle === 'min') {
        if (value >= maxVal) {
          value = maxVal - (rangeMax - rangeMin) * 0.01;
          if (value < rangeMin) value = rangeMin;
        }
        minValueInput.value = value;
      } else if (currentHandle === 'max') {
        if (value <= minVal) {
          value = minVal + (rangeMax - rangeMin) * 0.01;
          if (value > rangeMax) value = rangeMax;
        }
        maxValueInput.value = value;
      }

      updateSlider();
    }

    function stopDrag() {
      if (isDragging) {
        isDragging = false;
        currentHandle = null;
        sliderContainer.querySelectorAll('.slider-handle').forEach(h => h.classList.remove('active'));
      }
    }

    function moveHandler(e) {
      if (isDragging) {
        const rect = sliderContainer.getBoundingClientRect();
        const percent = ((e.clientX - rect.left) / rect.width) * 100;
        updateHandlePosition(percent);
      }
    }

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç X
function getClientX(e) {
  if (e.type.startsWith('touch')) {
    return e.touches && e.touches.length > 0 ? e.touches[0].clientX : 0;
  }
  return e.clientX;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
function handleStart(e) {
  e.preventDefault();
  e.stopPropagation();

  const handle = e.target.closest('.slider-handle');
  if (!handle) return;

  isDragging = true;
  currentHandle = handle.dataset.handle;
  handle.classList.add('active');

  const rect = sliderContainer.getBoundingClientRect();
  const clientX = getClientX(e);
  const percent = ((clientX - rect.left) / rect.width) * 100;
  updateHandlePosition(percent);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è
function handleMove(e) {
  if (!isDragging) return;

  e.preventDefault();
  e.stopPropagation();

  const rect = sliderContainer.getBoundingClientRect();
  const clientX = getClientX(e);
  const percent = ((clientX - rect.left) / rect.width) * 100;
  updateHandlePosition(percent);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è
function handleEnd(e) {
  stopDrag();
}

// üñ±Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—ã—à–∏
sliderContainer.addEventListener('mousedown', handleStart);
document.addEventListener('mousemove', handleMove);
document.addEventListener('mouseup', handleEnd);

// üëÜ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞—á-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
sliderContainer.addEventListener('touchstart', handleStart, { passive: false });
sliderContainer.addEventListener('touchmove', handleMove, { passive: false });
sliderContainer.addEventListener('touchend', handleEnd);

    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Å–ª–∞–π–¥–µ—Ä—É
    sliderContainer.addEventListener('click', function (e) {
      const rect = this.getBoundingClientRect();
      let percent = ((e.clientX - rect.left) / rect.width) * 100;
      let val = rangeMin + (percent / 100) * (rangeMax - rangeMin);
      val = parseFloat(val.toFixed(2));
      val = Math.max(rangeMin, Math.min(rangeMax, val)); // üö¶ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ

      const minVal = parseFloat(minValueInput.value);
      const maxVal = parseFloat(maxValueInput.value);

      const minPercent = ((minVal - rangeMin) / (rangeMax - rangeMin)) * 100;
      const maxPercent = ((maxVal - rangeMin) / (rangeMax - rangeMin)) * 100;

      // –ï—Å–ª–∏ –∫–ª–∏–∫ –±–ª–∏–∂–µ –∫ –ª–µ–≤–æ–º—É –ø–æ–ª–∑—É–Ω–∫—É ‚Äî –¥–≤–∏–≥–∞–µ–º –µ–≥–æ
      if (percent < minPercent + 5) {
        minValueInput.value = val;
      }
      // –ï—Å–ª–∏ –∫–ª–∏–∫ –±–ª–∏–∂–µ –∫ –ø—Ä–∞–≤–æ–º—É –ø–æ–ª–∑—É–Ω–∫—É ‚Äî –¥–≤–∏–≥–∞–µ–º –µ–≥–æ
      else if (percent > maxPercent - 5) {
        maxValueInput.value = val;
      } else {
        return;
      }

      updateSlider();
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
    updateSlider();
  });


}
filter();